syntax = "proto3";

package authservice;

option go_package = "github.com/voyalis/voyago-base/src/authservice/genproto;authservice";

// Temel Mesajlar
message RegisterRequest {
  string email = 1;
  string password = 2;
  string full_name = 3;
}
message RegisterResponse {
  UserInfo user = 1;
  string message = 2;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}
message LoginResponse {
  UserInfo user = 1;
  string access_token = 2;
  string refresh_token = 3; // MVP için kritik
  int32 expires_in = 4; // Access token geçerlilik süresi (saniye)
}

message ValidateTokenRequest {
  string token = 1; // Bu access token olacak
}
message ValidateTokenResponse {
  UserInfo user = 1;
}

// Token Yenileme
message RefreshAccessTokenRequest {
  string refresh_token = 1;
}
// RefreshAccessToken için yanıt olarak LoginResponse kullanılacak (yeni access + refresh token)

// Oturumu Sonlandırma
message LogoutRequest {
  string refresh_token = 1; // Hangi refresh token'ın iptal edileceği
}
message LogoutResponse {
  string message = 1;
}

// Şifre Yönetimi
message ChangePasswordRequest {
  string access_token = 1; // Kimin şifre değiştirdiğini bilmek için
  string old_password = 2;
  string new_password = 3;
}
message ChangePasswordResponse {
  string message = 1;
}

message RequestPasswordResetRequest {
  string email = 1;
}
message RequestPasswordResetResponse {
  string message = 1;   // Örneğin: "Eğer e-posta kayıtlıysa, sıfırlama linki gönderilecektir."
  int32 expires_in_seconds = 2; // Token'ın geçerlilik süresi (opsiyonel)
}

message ConfirmPasswordResetRequest {
  string reset_token = 1; // Kullanıcının e-postasından aldığı token
  string new_password = 2;
}
message ConfirmPasswordResetResponse {
  string message = 1;   // Örneğin: "Şifreniz başarıyla güncellendi."
}

// E-posta Doğrulama
message RequestEmailVerificationRequest {
  // string email = 1; // Genellikle access_token içinden alınır veya user_id ile
  string access_token = 1; // Hangi kullanıcının e-postasını doğrulayacağı
}
message RequestEmailVerificationResponse {
  string message = 1;
}
message ConfirmEmailVerificationRequest {
  string verification_token = 1;
}
message ConfirmEmailVerificationResponse {
  UserInfo user = 1; // Doğrulanmış kullanıcı bilgisi
  string message = 2;
}

// Kullanıcı Metadata Güncelleme
message UpdateUserMetadataRequest {
  string access_token = 1;
  string full_name = 2;
  // map<string, string> user_metadata = 3; // MVP sonrası eklenebilir
}
message UpdateUserMetadataResponse {
  UserInfo user = 1;
}

// Ortak Kullanıcı Bilgisi Mesajı
message UserInfo {
  string user_id = 1;       // UUID
  string email = 2;
  string full_name = 3;
  repeated string roles = 4;
  bool is_active = 5;       // MVP Kritik
  bool email_verified = 6;  // MVP için önemli
}

service AuthService {
  // Temel Kimlik Doğrulama RPC'leri (MVP Odak)
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc RefreshAccessToken(RefreshAccessTokenRequest) returns (LoginResponse); // MVP Kritik
  rpc Logout(LogoutRequest) returns (LogoutResponse);                       // MVP Kritik

  // Şifre ve Hesap Yönetimi RPC'leri (MVP'de bazıları mock/basit implementasyon olabilir)
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
  rpc ConfirmPasswordReset(ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);

  // E-posta Doğrulama RPC'leri (MVP'de bazıları mock/basit implementasyon olabilir)
  rpc RequestEmailVerification(RequestEmailVerificationRequest) returns (RequestEmailVerificationResponse);
  rpc ConfirmEmailVerification(ConfirmEmailVerificationRequest) returns (ConfirmEmailVerificationResponse);

  // Kullanıcı Bilgileri Güncelleme
  rpc UpdateUserMetadata(UpdateUserMetadataRequest) returns (UpdateUserMetadataResponse);
}