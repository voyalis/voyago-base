# Copyright 2018 Google LLC
# ... (Lisans başlığı aynı kalabilir) ...
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authservice
  labels:
    app: authservice
    component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authservice
      component: backend
  template:
    metadata:
      labels:
        app: authservice
        component: backend
    spec:
      automountServiceAccountToken: false # GÜVENLİK İYİLEŞTİRMESİ
      serviceAccountName: default 
      # terminationGracePeriodSeconds: 5

      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine # Bu imajda pg_isready bulunur
        env: # pg_isready'nin DB_USER ve DB_NAME'e ihtiyacı olabilir
        - name: PGHOST
          value: "postgres-auth-svc" # PostgreSQL servisimizin adı
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: postgres-auth-config
              key: POSTGRES_USER
        - name: PGDATABASE
          valueFrom:
            configMapKeyRef:
              name: postgres-auth-config
              key: POSTGRES_DB
        # Şifre genellikle pg_isready için gerekmez, bağlantı denemesi yapar.
        # Gerekirse PGPASSWORD de eklenebilir.
        command:
        - sh
        - -c
        - |
          echo "⏳ InitContainer: Waiting for PostgreSQL (postgres-auth-svc:5432) to be ready..."
          until pg_isready -q -h postgres-auth-svc -p 5432 -U ${PGUSER} -d ${PGDATABASE}; do
            echo "InitContainer: PostgreSQL is not yet ready, sleeping for 2 seconds..."
            sleep 2
          done
          echo "✅ InitContainer: PostgreSQL is up and ready!"

      containers:
      - name: authservice
        image: auth-service # Skaffold bu ismi build ettiği imajla değiştirecek
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 50051
          name: grpc
        env:
        - name: PORT
          value: "50051"
        - name: DB_HOST
          value: "postgres-auth-svc"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-auth-config
              key: POSTGRES_USER
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: postgres-auth-config
              key: POSTGRES_DB
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-auth-secret
              key: POSTGRES_PASSWORD
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: auth-jwt-secret     # Yukarıda oluşturduğumuz Secret'ın adı
              key: jwtSecret           # Secret içindeki anahtarın adı
        readinessProbe:
          grpc:
            port: 50051
          initialDelaySeconds: 20
          periodSeconds: 10
          failureThreshold: 3
        livenessProbe:
          grpc:
            port: 50051
          initialDelaySeconds: 30
          periodSeconds: 20
          failureThreshold: 3
        resources: # Bu blok zaten bir önceki önerimde vardı ve doğruydu
          requests:
            cpu: "100m"
            memory: "64Mi"
          limits:
            cpu: "200m"
            memory: "128Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: authservice
  labels:
    app: authservice
    component: backend
spec:
  type: ClusterIP
  selector:
    app: authservice
    component: backend
  ports:
  - name: grpc
    port: 50051
    targetPort: 50051 # Veya portun adı olan "grpc"
    protocol: TCP