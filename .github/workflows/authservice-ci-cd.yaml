name: AuthService CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/authservice/**'
      - '.github/workflows/authservice-ci-cd.yaml'
      - 'kubernetes-manifests/**' # Artık migration job'ı da dahil
      - 'skaffold.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/authservice/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  AUTH_SERVICE_IMAGE_NAME: auth-service
  K8S_NAMESPACE: default

jobs:
  test:
    name: Run Unit & Integration Tests for AuthService
    runs-on: ubuntu-latest
    services:
      postgres_test_db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: authdb_ci_test
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U testuser -d authdb_ci_test" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: ./src/authservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      - name: Install golang-migrate CLI
        run: |
          MIGRATE_VERSION="v4.17.1"
          curl -L https://github.com/golang-migrate/migrate/releases/download/${MIGRATE_VERSION}/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/
          migrate -version
      - name: Wait for PostgreSQL service
        run: |
          echo "Waiting for PostgreSQL (service: postgres_test_db mapped to localhost:5432)..."
          max_retries=30; count=0
          until nc -z localhost 5432; do
            if [ ${count} -ge ${max_retries} ]; then echo "PostgreSQL did not start in time."; exit 1; fi
            echo "PostgreSQL (localhost:5432) unavailable - sleeping"; sleep 2; count=$((count+1))
          done
          echo "PostgreSQL (localhost:5432) is up!"
      - name: Apply DB Migrations to test DB
        env:
          TEST_DB_URL_CI: "postgres://testuser:testpassword@localhost:5432/authdb_ci_test?sslmode=disable"
        run: migrate -database "$TEST_DB_URL_CI" -path ./migrations up
      - name: Run Go Tidy
        run: go mod tidy
      - name: Run Go Vet
        run: go vet ./...
      - name: Run tests (Unit and Integration)
        env:
          CI_TEST_ENV: "true" # db.go'nun bu ortam değişkenini okuyup test DB'ye bağlanması için
          DB_HOST: localhost 
          DB_PORT: "5432"
          DB_USER: testuser
          DB_PASSWORD: testpassword
          DB_NAME: authdb_ci_test
          JWT_SECRET_KEY: "ci_test_jwt_secret_for_voyago_auth_xyz123"
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload coverage to Codecov (Optional)
        if: success() && github.repository == 'voyalis/voyago-base'
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./src/authservice/coverage.out # working-directory ./src/authservice olduğu için path ./coverage.out olmalıydı. Düzeltme:
          # files: ./coverage.out 

  build-and-push:
    name: Build & Push AuthService Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag_sha_short: ${{ steps.meta.outputs.version }} # sha-xxxxxxx formatında
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ env.AUTH_SERVICE_IMAGE_NAME }}
          tags: |
            type=sha,format=short,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./src/authservice # Dockerfile ve migrations klasörü burada olmalı
          file: ./src/authservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-and-e2e-test:
    name: Deploy to Minikube & Run E2E Tests
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest
        with:
          cache: true

      - name: Ensure Kubeconfig is set for Minikube
        run: |
          minikube update-context
          kubectl config use-context minikube
          # kubectl create namespace ${{ env.K8S_NAMESPACE }} || echo "Namespace '${{ env.K8S_NAMESPACE }}' already exists."

      - name: Apply Base Kubernetes Manifests (PostgreSQL, Secrets)
        run: |
          echo "Applying PostgreSQL and Secret manifests..."
          kubectl apply -f kubernetes-manifests/postgres-auth/configmap.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/secret.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/auth-jwt-secret.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/pvc.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/deployment.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/service.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for PostgreSQL to be ready..."
          kubectl rollout status deployment/postgres-auth-deployment --namespace=${{ env.K8S_NAMESPACE }} --timeout=180s

      - name: Prepare and Run Database Migration Job
        env:
            # Bu ortam değişkenleri auth-migration-job.yaml içindeki envFrom tarafından set edilecek,
            # ancak Job'ın imajını dinamik olarak set etmek için burada imaj adını alıyoruz.
            IMAGE_TO_USE_FOR_MIGRATION: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ env.AUTH_SERVICE_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag_sha_short }}
        run: |
          echo "Preparing Database Migration Job manifest..."
          # auth-migration-job.yaml'ı kopyala ve imajı dinamik olarak set et
          cp kubernetes-manifests/auth-migration-job.yaml auth-migration-job-ci.yaml
          # 'image: placeholder-image-will-be-set-by-ci' satırını arıyoruz
          sed -i "s|image: placeholder-image-will-be-set-by-ci|image: ${IMAGE_TO_USE_FOR_MIGRATION}|g" auth-migration-job-ci.yaml
          
          echo "Applying and running Database Migration Job..."
          kubectl delete job auth-db-migration-job --namespace=${{ env.K8S_NAMESPACE }} --ignore-not-found=true
          sleep 5 # Silinmesi için bekleme
          kubectl apply -f auth-migration-job-ci.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for Database Migration Job to complete..."
          kubectl wait --for=condition=complete job/auth-db-migration-job --namespace=${{ env.K8S_NAMESPACE }} --timeout=300s
          echo "Database Migration Job completed. Displaying logs (last 50 lines):"
          kubectl logs job/auth-db-migration-job --namespace=${{ env.K8S_NAMESPACE }} --tail=50 || echo "Migration job logs not available or job failed/no logs."
          # Job'ın başarılı olup olmadığını kontrol et
          MIGRATION_SUCCESS=$(kubectl get job auth-db-migration-job -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.succeeded}')
          if [ "$MIGRATION_SUCCESS" != "1" ]; then
            echo "Database migration job failed!"
            exit 1
          fi
          echo "Database migration job succeeded."


      - name: Deploy AuthService with latest image
        run: |
          kubectl apply -f kubernetes-manifests/authservice.yaml --namespace=${{ env.K8S_NAMESPACE }}
          IMAGE_TO_DEPLOY_AUTHSERVICE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ env.AUTH_SERVICE_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag_sha_short }}"
          echo "Setting image for AuthService deployment to: ${IMAGE_TO_DEPLOY_AUTHSERVICE}"
          kubectl set image deployment/authservice authservice=${IMAGE_TO_DEPLOY_AUTHSERVICE} --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for AuthService rollout..."
          kubectl rollout status deployment/authservice --namespace=${{ env.K8S_NAMESPACE }} --timeout=180s

      - name: Install tools for E2E tests (nc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y netcat-openbsd # nc için
          # migrate CLI zaten AuthService imajında var, E2E testler Go ile çalışacak

      - name: Port-forward AuthService gRPC for E2E tests
        run: |
          echo "Starting AuthService port-forward for E2E tests..."
          nohup kubectl port-forward svc/authservice 50051:50051 -n ${{ env.K8S_NAMESPACE }} > pf_auth_e2e.log 2>&1 &
          sleep 10

      - name: Wait for gRPC port (50051) to be ready on localhost (for E2E)
        run: |
          echo "Waiting for localhost:50051 (AuthService for E2E) to be ready..."
          max_retries=30; count=0
          until nc -z localhost 50051; do
            if [ ${count} -ge ${max_retries} ]; then echo "Port 50051 (AuthService) did not become ready for E2E."; cat pf_auth_e2e.log; exit 1; fi
            echo "Port 50051 (AuthService for E2E) unavailable - sleeping"; sleep 2; count=$((count+1))
          done
          echo "Port 50051 (AuthService for E2E) is up!"

      - name: Run E2E Tests
        working-directory: ./src/authservice # E2E testleri de bu dizin altından çalıştıracağız
        env:
          AUTH_SERVICE_ADDR_E2E_TEST: "localhost:50051"
          # JWT_SECRET_KEY'i GitHub secret'tan alıp buraya da verebiliriz,
          # ama E2E testimiz token içeriğini değil, servisin davranışını test ediyor.
          # Servis zaten K8s Secret'ından alıyor.
        run: go test -v -race ./e2e/... -timeout 3m

      - name: Tear down AuthService port-forward (Best effort)
        if: always()
        run: |
          echo "Attempting to kill AuthService port-forward process..."
          pkill -f "kubectl port-forward svc/authservice 50051:50051" || echo "AuthService Port-forward not found or already killed."
          # cat pf_auth_e2e.log || echo "pf_auth_e2e.log not found." # Çok fazla log üretebilir CI'da

      - name: Verify Deployments (Final Log Check)
        if: always() # Her zaman çalışsın, hata olsa bile son durumu görelim
        run: |
          echo "Final check of deployments in namespace: ${{ env.K8S_NAMESPACE }}"
          kubectl get all -n ${{ env.K8S_NAMESPACE }}
          echo "--- AuthService Logs (Last 100 lines) ---"
          kubectl logs deployment/authservice -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "AuthService logs could not be retrieved."
          echo "--- PostgreSQL Logs (Last 100 lines) ---"
          kubectl logs deployment/postgres-auth-deployment -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "PostgreSQL logs could not be retrieved."