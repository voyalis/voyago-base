name: AuthService CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/authservice/**'
      - '.github/workflows/authservice-ci-cd.yaml'
      - 'kubernetes-manifests/**' # Bu zaten kapsıyor olmalı
      # - 'kubernetes-manifests/authservice.yaml' # Üstteki daha genel
      # - 'kubernetes-manifests/postgres-auth/**' # Üstteki daha genel
      # - 'kubernetes-manifests/auth-jwt-secret.yaml' # Üstteki daha genel
      # - 'kubernetes-manifests/auth-migration-job.yaml' # YENİ EKLENDİ (veya üstteki paths ile kapsanıyor)
      - 'skaffold.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/authservice/**'
      - '.github/workflows/authservice-ci-cd.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  AUTH_SERVICE_IMAGE_NAME: auth-service
  K8S_NAMESPACE: default

jobs:
  test-unit:
    name: Run AuthService Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/authservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: ./src/authservice/go.sum # go.sum yolu belirtildi

      - name: Run Go Tidy
        run: go mod tidy

      - name: Run Go Vet
        run: go vet ./...

      - name: Run Unit Tests (repository & service)
        env: # Unit testler için (özellikle mocklanmayan kısımlar varsa)
          JWT_SECRET_KEY: "ci_unit_test_jwt_secret_123"
        run: |
          echo "Running repository unit tests..."
          go test -v -race -coverprofile=repo_coverage.out -covermode=atomic ./repository/...
          echo "Running service unit tests..."
          go test -v -race -coverprofile=service_coverage.out -covermode=atomic ./service/...
          # Birleştirilmiş coverage için (opsiyonel):
          # echo "mode: atomic" > coverage.out && cat repo_coverage.out service_coverage.out | grep -v mode: | grep -v "^$" >> coverage.out

  build-and-push:
    name: Build & Push AuthService Docker Image
    needs: test-unit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag_sha_short: ${{ steps.meta.outputs.version }} # örn: sha-a1b2c3d
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ env.AUTH_SERVICE_IMAGE_NAME }}
          tags: |
            type=sha,format=short,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/authservice
          file: ./src/authservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-and-e2e-test:
    name: Deploy to Minikube & Run E2E Tests
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest
        with:
          cache: true

      - name: Ensure Kubeconfig is set for Minikube
        run: |
          minikube update-context
          kubectl config use-context minikube
          echo "Current Kube context set to Minikube for namespace: ${{ env.K8S_NAMESPACE }}"

      # --- GÜNCELLENMİŞ SECRET VE MANIFEST UYGULAMA ADIMI ---
      - name: Apply Base K8s Manifests & Create/Update Auth JWT Secret
        env:
          # GitHub Secret'tan base64 encode edilmiş JWT secret'ını alıyoruz
          AUTH_JWT_SECRET_B64_FROM_GITHUB: ${{ secrets.AUTH_JWT_SECRET_B64 }}
        run: |
          echo "Applying PostgreSQL manifests to namespace: ${{ env.K8S_NAMESPACE }}"
          kubectl apply -f kubernetes-manifests/postgres-auth/configmap.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/secret.yaml --namespace=${{ env.K8S_NAMESPACE }} # Bu PostgreSQL şifresi için
          kubectl apply -f kubernetes-manifests/postgres-auth/pvc.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/deployment.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/service.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for PostgreSQL to be ready..."
          kubectl rollout status deployment/postgres-auth-deployment --namespace=${{ env.K8S_NAMESPACE }} --timeout=240s

          echo "Creating/Updating Kubernetes secret 'auth-jwt-secret' from GitHub Secret..."
          if [ -z "$AUTH_JWT_SECRET_BASE64_FROM_GITHUB" ]; then
            echo "ERROR: GitHub Secret AUTH_JWT_SECRET_B64 is not set!"
            exit 1
          fi
          # Kubernetes Secret'ı oluştur veya güncelle
          # --from-literal kullandığımızda değerin base64 encode edilmemiş olması beklenir, kubectl kendi encode eder.
          # Ancak biz GitHub Secret'a base64 encode edilmiş halini koyduğumuz için,
          # bunu önce decode edip sonra literal olarak verebiliriz ya da doğrudan data field'ını kullanarak manifest oluşturabiliriz.
          # En temizi, kubectl'in decode etmesini sağlamak için GitHub Secret'a HAM string'i koymaktır.
          # Eğer GitHub Secret'ta BASE64'LÜ DEĞER varsa, onu decode etmeliyiz:
          # DECODED_JWT_SECRET=$(echo "$AUTH_JWT_SECRET_BASE64_FROM_GITHUB" | base64 --decode)
          # kubectl create secret generic auth-jwt-secret \
          #   --from-literal=jwtSecret="${DECODED_JWT_SECRET}" \
          # ...
          # DAHA BASİT YÖNTEM (GitHub Secret'a zaten base64'lü koyduysak):
          # type: Opaque bir secret için data alanı base64 olmalı.
          # `kubectl create secret generic` komutu `--from-literal` ile verdiğiniz değeri otomatik base64 encode eder.
          # Eğer GitHub secret'ınız ZATEN base64 ise ve bunu `data` alanında kullanacaksanız,
          # o zaman secret manifestini dinamik oluşturmak daha iyi.
          # Ama `--from-literal` kullanıyorsak, GitHub secret'ına HAM değeri koyup, kubectl'in encode etmesini beklemek daha standart.

          # --- ÖNERİLEN DÜZELTME: ---
          # 1. GitHub Secret'ına (AUTH_JWT_SECRET_B64) JWT Key'inizin HAM (encode edilmemiş) halini koyun.
          # 2. Aşağıdaki komutu kullanın, kubectl base64 encode işlemini yapacaktır.
          kubectl create secret generic auth-jwt-secret \
            --from-literal=jwtSecret="${{ secrets.AUTH_JWT_SECRET_B64 }}" \
            --namespace=${{ env.K8S_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
          # Bu, eğer secret zaten varsa hata verecektir. Güncellemek için:
          # kubectl delete secret auth-jwt-secret --namespace=${{ env.K8S_NAMESPACE }} --ignore-not-found=true
          # kubectl create secret generic auth-jwt-secret \
          #   --from-literal=jwtSecret="${{ secrets.AUTH_JWT_SECRET_B64 }}" \
          #   --namespace=${{ env.K8S_NAMESPACE }}
          # VEYA daha iyisi, apply ile idempotent yapmak:
          # (Aşağıdaki script, secret yoksa oluşturur, varsa günceller)
          # cat <<EOF | kubectl apply -f -
          # apiVersion: v1
          # kind: Secret
          # metadata:
          #   name: auth-jwt-secret
          #   namespace: ${{ env.K8S_NAMESPACE }}
          # type: Opaque
          # stringData: # stringData kullanırsak kubectl otomatik base64 encode eder
          #   jwtSecret: ${{ secrets.AUTH_JWT_SECRET_B64 }} # BURAYA HAM SECRET GELMELİ
          # EOF
          echo "Kubernetes secret 'auth-jwt-secret' created/updated."
      # ---------------------------------------------------------------------

      # ... (Prepare and Run Database Migration Job adımı aynı kalır) ...
      # ... (Deploy AuthService with Correct Image, E2E test adımları ve Verify Deployments aynı kalır) ...