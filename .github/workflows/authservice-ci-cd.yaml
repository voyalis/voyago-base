name: AuthService CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/authservice/**'
      - '.github/workflows/authservice-ci-cd.yaml'
      - 'skaffold.yaml'
      - 'kubernetes-manifests/authservice.yaml'
      - 'kubernetes-manifests/postgres-auth/**'
      - 'kubernetes-manifests/auth-jwt-secret.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/authservice/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auth-service # Format: owner/repo/image-name
  # K8S_NAMESPACE: voyago-staging # Skaffold.yaml'da veya K8s manifestlerinde belirtilecekse burada gerek yok.
                                 # Şimdilik Minikube'ün default namespace'ini kullanacağız.

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/authservice
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run Go Tidy
        run: go mod tidy
        # Opsiyonel: Değişiklik varsa hata verdirilebilir.

      - name: Run tests
        run: go test -v -race ./...

  build-and-push:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # GHCR'ye yazmak için gerekli
    outputs: # Bu job'dan çıkacak imaj etiketini diğer job'larda kullanmak için
      image_tag_sha: ${{ steps.meta.outputs.version }} # Commit SHA'sını içeren etiket
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Bu adıma bir id veriyoruz ki çıktısını kullanabilelim
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short,prefix= # Commit SHA'sının kısa hali (örn: sha-a1b2c3d)
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/authservice
          file: ./src/authservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    

  deploy-to-minikube:
    name: Deploy to Staging (Minikube on Runner)
    needs: build-and-push # build-and-push job'ından sonra çalışacak
    if: github.ref == 'refs/heads/main' # Sadece main branch'e push yapıldığında
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest # Veya tercih ettiğiniz action

      # --- SKAFFOLD'U MANUEL KURMA ---
      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/
          skaffold version # Kurulumu doğrulamak için versiyonu yazdır

      - name: Get image name with SHA
        id: image_tag
        run: |
          SHA_TAG="sha-$(echo ${GITHUB_SHA} | cut -c1-7)"
          FULL_IMAGE_NAME_WITH_SHA="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA_TAG}"
          echo "FULL_IMAGE_NAME_WITH_SHA=${FULL_IMAGE_NAME_WITH_SHA}" >> $GITHUB_OUTPUT
          echo "Deploying image: ${FULL_IMAGE_NAME_WITH_SHA}"
      
      - name: Ensure Kubeconfig is set for Minikube
        run: |
          minikube update-context
          kubectl config use-context minikube
          kubectl create namespace ${{ env.K8S_NAMESPACE }} || echo "Namespace ${{ env.K8S_NAMESPACE }} already exists or could not be created, continuing..."

      - name: Deploy to Minikube using Skaffold
        run: |
          echo "Deploying with Skaffold using image: ${{ steps.image_tag.outputs.FULL_IMAGE_NAME_WITH_SHA }}"
          eval $(minikube -p minikube docker-env) # Minikube'ün Docker daemon'ını kullan
          
          skaffold run \
            --images auth-service=${{ steps.image_tag.outputs.FULL_IMAGE_NAME_WITH_SHA }} \
            --kube-context minikube \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --default-repo="" \
            --skip-tests=true
            # skaffold.yaml dosyasının yolu doğru olmalı (kök dizinde olduğunu varsayıyoruz)

      - name: Verify Deployments
        if: success()
        run: |
          echo "Waiting for pods in namespace ${{ env.K8S_NAMESPACE }} to be ready..."
          sleep 60 
          kubectl get all -n ${{ env.K8S_NAMESPACE }}
          echo "--- AuthService Logs ---"
          kubectl logs deployment/authservice -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "AuthService logs not available yet"
          echo "--- PostgreSQL Logs ---"
          kubectl logs deployment/postgres-auth-deployment -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "PostgreSQL logs not available yet"