name: AuthService CI/CD

on:
  push:
    branches:
      - main # Ana geliştirme branch'iniz
    paths: # Sadece bu dosyalarda değişiklik olduğunda çalışsın
      - 'src/authservice/**'
      - '.github/workflows/authservice-ci-cd.yaml'
      - 'kubernetes-manifests/authservice.yaml'
      - 'kubernetes-manifests/postgres-auth/**'
      - 'kubernetes-manifests/auth-jwt-secret.yaml'
      # skaffold.yaml'ı CI'da kullanmayacağımız için paths'ten çıkarabiliriz.
      # Ancak lokal geliştirme için önemli olduğundan, değişikliklerini takip etmek isteyebilirsiniz.
      # Şimdilik bırakalım, ileride CI'dan tamamen çıkarırsak kaldırırız.
      - 'skaffold.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/authservice/**'

env:
  REGISTRY: ghcr.io
  # github.repository size "voyalis/voyago-base" gibi bir çıktı verir.
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}/auth-service # Tam imaj yolu: ghcr.io/voyalis/voyago-base/auth-service
  K8S_NAMESPACE: default # Minikube için varsayılan namespace

jobs:
  test:
    name: Run Go Tests for AuthService
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/authservice # Testleri authservice dizininde çalıştır
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Projenizdeki go versiyonu
          cache: true # Go modüllerini cache'ler

      - name: Run Go Tidy (Check dependencies)
        run: go mod tidy

      - name: Run Go Vet (Static analysis)
        run: go vet ./...

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
        # Test kapsamı raporu için:
        # - name: Upload coverage reports to Codecov
        #   uses: codecov/codecov-action@v4
        #   with:
        #     token: ${{ secrets.CODECOV_TOKEN }} # CODECOV_TOKEN secret'ı GitHub'da ayarlanmalı
        #     files: ./coverage.out

  build-and-push:
    name: Build & Push AuthService Docker Image
    needs: test # test job'ı başarılı olursa başlar
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # GHCR'ye yazmak için
    outputs:
      image_digest: ${{ steps.push.outputs.digest }} # Pushlanan imajın digest'i
      image_tag_sha: ${{ steps.meta.outputs.version }} # sha-xxxxxxx gibi etiket
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short,prefix= # Commit SHA'sının kısa hali (örn: sha-a1b2c3d)
            type=raw,value=latest,enable={{is_default_branch}} # Sadece main branch ise latest etiketi

      - name: Build and push Docker image
        id: push # Bu adıma bir ID veriyoruz ki çıktısını kullanabilelim
        uses: docker/build-push-action@v5
        with:
          context: ./src/authservice # Dockerfile'ın bulunduğu dizin
          file: ./src/authservice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-minikube:
    name: Deploy AuthService to Minikube
    needs: build-and-push # build-and-push job'ından sonra başlar
    if: github.ref == 'refs/heads/main' # Sadece main branch'e push yapıldığında deploy et
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest # Veya manusa/actions-setup-minikube@v2.9.0

      - name: Ensure Kubeconfig is set for Minikube
        run: |
          minikube update-context
          kubectl config use-context minikube
          # kubectl create namespace ${{ env.K8S_NAMESPACE }} || echo "Namespace '${{ env.K8S_NAMESPACE }}' already exists." 
          # default namespace için bu satır gereksizdir ve hata verebilir.

      - name: Deploy/Update Kubernetes Manifests
        run: |
          echo "Applying PostgreSQL and Secret manifests..."
          kubectl apply -f kubernetes-manifests/postgres-auth/configmap.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/secret.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/auth-jwt-secret.yaml --namespace=${{ env.K8S_NAMESPACE }} # JWT Secret
          kubectl apply -f kubernetes-manifests/postgres-auth/pvc.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          # PostgreSQL Deployment ve Service'i uygula (veya güncelle)
          # --force ile güncelleme sorunlarını çözebilir, ama dikkatli kullanılmalı
          kubectl apply -f kubernetes-manifests/postgres-auth/deployment.yaml --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f kubernetes-manifests/postgres-auth/service.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for PostgreSQL to be ready..."
          kubectl rollout status deployment/postgres-auth-deployment --namespace=${{ env.K8S_NAMESPACE }} --timeout=180s

          # AuthService manifestini uygula
          kubectl apply -f kubernetes-manifests/authservice.yaml --namespace=${{ env.K8S_NAMESPACE }}
          
          # Deployment'ın imajını güncelle
          IMAGE_TO_DEPLOY="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag_sha }}"
          echo "Setting image for AuthService deployment to: ${IMAGE_TO_DEPLOY}"
          kubectl set image deployment/authservice authservice=${IMAGE_TO_DEPLOY} --namespace=${{ env.K8S_NAMESPACE }}
          
          echo "Waiting for AuthService rollout..."
          kubectl rollout status deployment/authservice --namespace=${{ env.K8S_NAMESPACE }} --timeout=120s

      - name: Verify Deployments
        if: success()
        run: |
          echo "Verifying deployments in namespace: ${{ env.K8S_NAMESPACE }}"
          sleep 30 # Podların tam olarak log üretmeye başlaması için biraz bekleme
          kubectl get all -n ${{ env.K8S_NAMESPACE }}
          echo "--- AuthService Logs (max 100 lines) ---"
          kubectl logs deployment/authservice -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "AuthService logs not (yet) available."
          echo "--- PostgreSQL Logs (max 100 lines) ---"
          kubectl logs deployment/postgres-auth-deployment -n ${{ env.K8S_NAMESPACE }} --tail=100 || echo "PostgreSQL logs not (yet) available."